//generate_C_code(input1,input2,input3,assign1,assign2,assign3), Mi*4/64*512, digest_memory(&assign1[0], &assign1[64])+digest_memory(&assign2[0], &assign2[64])+digest_memory(&assign3[0], &assign3[64]));
  return 0;
}


#include "header.h"
int G[16384][128];
__attribute__((noinline))
void example8 (int z) {
   int i,j;
   
   for (i=0; i<16384-1; i+=2) {
     for (j=0; j<128-1; j+=2) {
       G[i][j] = z;
       G[i+1][j] = z;
       G[i][j+1] = z;
       G[i+1][j+1] = z;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&G[0][0], &G[0][128]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&G[0][0], &G[0][128]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[4096][128];
int G2[4096+4][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
       for (j = 0; j < 128; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 4096, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int result[256][4096];
__attribute__((noinline))
void example8 (int z) {
   int i,j;
   
   for (i=0; i<256-1; i+=2) {
     for (j=0; j<4096-1; j+=2) {
       result[i][j] = z;
       result[i+1][j] = z;
       result[i][j+1] = z;
       result[i+1][j+1] = z;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][4096]);
  BENCH("Example8",   example8(8), 512, digest_memory(&result[0][0], &result[0][4096]));
  return 0;
}


#include "header.h"
short short_a[128];
int   result[128] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ short_a, int* __restrict__ result) {
  int i;
  for (i = 0; i < 128; i+=2) {
    result[i] = (int) short_a[i];
  }
}
int main(int argc,char* argv
====================
//generate_C_code
  (&input1[0], &input1[64]);
  init_memory(&input2[0], &input2[64]);
  init_memory(&input3[0], &input3[64]);
  BENCH("Example10b", example10b(input1,input2,input3,result1,result2,result3), Mi*4/64*512, digest_memory(&result1[0], &result1[64])+digest_memory(&result2[0], &result2[64])+digest_memory(&result3[0], &result3[64]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int A[256][256];
int B[256][256];
__attribute__((noinline))
void example13(int A[][256], int B[][256], int *out) {
  int i,j;
  for (i = 0; i < 256; i++) {
    int result = 0;
    for (j = 0; j < 256; j+=8) {
      result += (A[i][j] +B[i][j]);
    }
    out[i] = result;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&A[0][0], &A[0][256]);
  init_memory(&B[0][0],&B[0][256]);
  BENCH("Example13",  example13(A,B,ia), 4096, digest_memory(&ia[0], &ia[256]));
  return 0;
}


#include "header.h"
int assign[16384][512];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<16384-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][512]);
  BENCH("Example8",   example8(8), 1024, digest_memory(&assign[0][0], &assign[0][512]));
  return 0;
}


#include "header.h"
int Out[64][128];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<64; i++) {
     for (j=0; j<128; j++) {
       Out[i][j] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Out[0][0], &Out[0][128]);
  BENCH("Example8",   example8(8), 32768, digest_memory(&Out[0][0], &Out[0][128]));
  return 0;
}


#include "header.h"
int assign[4096][1024];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<4096-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       assign[i][j] = x;
       assign[i+1][j] = x;
       assign[i][j+1] = x;
       assign[i+1][j+1] = x;
 
====================
//generate_C_code[0], &input[512]);
  BENCH("Example10b", example10b(G[0][0], &G[0][512]));
  return 0;
}


#include "header.h"
int result[2048][4096];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<2048-1; i+=2) {
     for (j=0; j<4096-1; j+=2) {
       result[i][j] = y;
       result[i+1][j] = y;
       result[i][j+1] = y;
       result[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][4096]);
  BENCH("Example8",   example8(8), 512, digest_memory(&result[0][0], &result[0][4096]));
  return 0;
}


#include "header.h"
int   ia[64] ALIGNED16;
int in1[64][64];
int in2[64][64];
__attribute__((noinline))
void example13(int in1[][64], int in2[][64], int *out) {
  int i,j;
  for (i = 0; i < 64; i++) {
    int output = 0;
    for (j = 0; j < 64; j+=8) {
      output += (in1[i][j] +in2[i][j]);
    }
    out[i] = output;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  init_memory(&in1[0][0], &in1[0][64]);
  init_memory(&in2[0][0],&in2[0][64]);
  BENCH("Example13",  example13(in1,in2,ia), 2048, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[512][256];
int G2[512+4][256];
__attribute__((noinline))
void example14(int A[][256], int coeff[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 256; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 1024, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[128] ALIGNED16;
int op1[4096][128];
int op2[4096][128];
__attribute__((noinline))
void example13(int op1[][128], int op2[][128], int *out) {
  int i,j;
  for (i = 0; i < 4096; i++) {
    int sum_add = 0;
    for (j = 0; j < 128; j+=8) {
      sum_add += (op1[i
====================
//generate_C_code) {
  int i;
  for (i = 0; i < 256/4; i++){
    output[i] = input1[i] *input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[256]);
  init_memory(&input1[0], &input1[256]);
  init_memory(&input2[0], &input2[256]);
  BENCH("Example10b", example10b(input1,input2,output1,output2), Mi*4/256*512, digest_memory(&output[0], &output[256])+digest_memory(&output[256]));
  return 0;
}


#include "header.h"
short input1[4096];
short input2[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 4096; i+=2) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[4096]);
  init_memory(&result2[0], &result2[4096]);
  init_memory(&input1[0], &input1[4096]);
  init_memory(&input2[0], &input2[4096]);
  BENCH("Example10b", example10b(input1,input2,result1,result2), Mi*4/4096*512, digest_memory(&result1[0], &result1[4096])+digest_memory(&result2[0], &result2[4096]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[16384][128];
int G2[16384+2][128];
__attribute__((noinline))
void example14(int A[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 16384; i++)
        for (j = 0; j < 128; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 8192, digest_memory(&ia[0], &ia[2]));
  return 0;
}


#include "header.h"
int o[4096] ALIGNED16;
int i1[4096] ALIGNED16;
__attribute__((noinline))
void  example7 (int x) {
   int i;
   
   for (i=0; i<4096-x; i++){
      o[i] *= i1[i+x];
   }
}
int main(int argc,char* argv[]){
  init_memory(&o[0], &o[4096]);
  BENCH("Example7",   example7(4), Mi/4096*512, digest_memory(&o[0], &o[4096]));
  return 0;
}


#include "header.h"
short sa[4096];
short sb[4096];
short sc
====================
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 //generate_C_code(input,i+1,i+3), Mi*4/256*512, digest_memory(&output[0], &output[256])+digest_memory(&output[256]));
  return 0;
}


#include "header.h"
short input1[16384];
short input2[16384];
short input3[16384];
int   result1[16384] ALIGNED16;
int   result2[16384] ALIGNED16;
int   result3[16384] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, short *__restrict__ input3, int* __restrict__ result1, int* __restrict__ result2, int* __restrict__ result3) {
  int i;
  for (i = 0; i < 16384; i++) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
    result3[i] = (int) input3[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[16384]);
  init_memory(&result2[0], &result2[16384]);
  init_memory(&result3[0], &result3[16384]);
  init_memory(&input1[0], &input1[16384]);
  init_memory(&input2[0], &input2[16384]);
  init_memory(&input3[0], &input3[16384]);
  BENCH("Example10b", example10b(input1,input2,input3,result1,result2,result3), Mi*4/16384*512, digest_memory(&result1[0], &result1[16384])+digest_memory(&result2[0], &result2[16384])+digest_memory(&result3[0], &result3[16384]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[16384][16384];
int G2[16384+4][16384];
__attribute__((noinline))
void example14(int in[][16384], int coeff[][16384], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 16384; i++)
        for (j = 0; j < 16384; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][16384]);
  init_memory(&G2[0][0],&G2[0][16384]);
  BENCH("Example14",  example14(G2,G,ia), 32, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
short sa[512];
short sb[512];
short sc[512];
int   ia[512] ALIGNED16;
int   ib[512] ALIGNED16;
int   ic[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, short *__restrict__ sc, int* __restrict__ ia, int* __restrict__ ib, int* __restrict__ ic) {
  int i;
  for (i = 0; i < 512; i+=2) {
    ia[i] = ib[i] + ic[i];
    sa[i] = sb[i] + sc[i];
  }
}
int main(int argc
====================
//generate_C_code(&short_a[0], &short_a[16384]);
  BENCH("Example10b", example10b(short_a,result), Mi*4/16384*512, digest_memory(&result[0], &result[16384]));
  return 0;
}


#include "header.h"
int result[64][1024];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<64-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       result[i][j] = x;
       result[i+1][j] = x;
       result[i][j+1] = x;
       result[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][1024]);
  BENCH("Example8",   example8(8), 65536, digest_memory(&result[0][0], &result[0][1024]));
  return 0;
}


#include "header.h"
short input1[64];
short input2[64];
int   result1[64] ALIGNED16;
int   result2[64] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 64; i++) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[64]);
  init_memory(&result2[0], &result2[64]);
  init_memory(&input1[0], &input1[64]);
  init_memory(&input2[0], &input2[64]);
  BENCH("Example10b", example10b(input1,input2,result1,result2), Mi*4/64*512, digest_memory(&result1[0], &result1[64])+digest_memory(&result2[0], &result2[64]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
int A[4096][1024];
int B[4096][1024];
__attribute__((noinline))
void example13(int A[][1024], int B[][1024], int *out) {
  int i,j;
  for (i = 0; i < 4096; i++) {
    int sub = 0;
    for (j = 0; j < 1024; j+=8) {
      sub += (A[i][j] -B[i][j]);
    }
    out[i] = sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[1024]);
  init_memory(&A[0][0], &A[0][1024]);
  init_memory(&B[0][0],&B[0][1024]);
  BENCH("Example13",  example13(A,B,ia), 256, digest_memory(&ia[0], &ia[1024]));
  return 0;
}


#include "header.h"
short input1[512];
short input2[512];
int   result1[512] ALIGNED16;
int   result2[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for
====================
//generate_C_code()) {
  int i;
  for (i = 0; i < 256; i+=2) {
    for (j = 0; j < 128; j+=8) {
      output[i] = (int) input[i];
     output[i+1] = (int) input[i+1];
     output[i+2]=output[i];
   }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[128]);
  BENCH("Example2a",  example2a(2), Mi*4/128*512, digest_memory(&output[0], &output[128]));
  return 0;
}


#include "header.h"
int Out[4096][16384];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<4096-1; i+=2) {
     for (j=0; j<16384-1; j+=2) {
       Out[i][j] = x;
       Out[i+1][j] = x;
       Out[i][j+1] = x;
       Out[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Out[0][0], &Out[0][16384]);
  BENCH("Example8",   example8(8), 1024, digest_memory(&Out[0][0], &Out[0][16384]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[8192][64];
int G2[8192+8][64];
__attribute__((noinline))
void example14(int A[][64], int coeff[][64], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 8192; i++)
        for (j = 0; j < 64; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][64]);
  init_memory(&G2[0][0],&G2[0][64]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
short short_a[512];
short short_b[512];
int   ia[512] ALIGNED16;
int   ib[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ short_a, short *__restrict__ short_b, int* __restrict__ ia, int* __restrict__ ib) {
  int i;
  for (i = 0; i < 512; i+=2) {
    ia[i] = (int) short_a[i];
    ib[i] = (int) short_b[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[512]);
  init_memory(&ib[0], &ib[512]);
  init_memory(&short_a[0], &short_a[512]);
  init_memory(&short_b[0], &short_b[512]);
  BENCH("Example10b", example10b(short_a,short_b,ia,ib), Mi*4/512*512, digest_
====================
//generate_C_code(G[0][0], &G[0][1024]);
  BENCH("Example8",   example8(8), 64, digest_memory(&G[0][0], &G[0][1024]));
  return 0;
}


#include "header.h"
int G[2048][16384];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<2048-1; i+=2) {
     for (j=0; j<16384-1; j+=2) {
       G[i][j] = y;
       G[i+1][j] = y;
       G[i][j+1] = y;
       G[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&G[0][0], &G[0][16384]);
  BENCH("Example8",   example8(8), 32, digest_memory(&G[0][0], &G[0][16384]));
  return 0;
}


#include "header.h"
int in[2048] ALIGNED16;
int res[2048] ALIGNED16;
__attribute__((noinline))
void example4c (){
   int i;
    const int MAX = 4;
   
   for (i=0; i<2048-1; i+=2){
      int j = in[i];
      res[i] = (j > MAX ? MAX : 0);
      res[i+1] = j;
    }
}
int main(int argc,char* argv[]){
  init_memory(&in[0], &in[2048]);
  init_memory(&res[0], &res[2048]);
  BENCH("Example4c",  example4c(), Mi*4/2048*512, digest_memory(&res[0], &res[2048]));
  return 0;
}


#include "header.h"
short input1[2048];
short input2[2048];
int   ia[2048] ALIGNED16;
int   ib[2048] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ ia, int* __restrict__ ib) {
  int i;
  for (i = 0; i < 2048; i+=2) {
    ia[i] = (int) input1[i];
    ib[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2048]);
  init_memory(&ib[0], &ib[2048]);
  init_memory(&input1[0], &input1[2048]);
  init_memory(&input2[0], &input2[2048]);
  BENCH("Example10b", example10b(input1,input2,ia,ib), Mi*4/2048*512, digest_memory(&ia[0], &ia[2048])+digest_memory(&ib[0], &ib[2048]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[4096][512];
int G2[4096+2][512];
__attribute__((noinline))
void example14(int in[][512], int coeff[][512], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 512; j++)
        
====================
//generate_C_code[0], &input[16384]);
  BENCH("Example10b", example10b(input,output), Mi*4/16384*512, digest_memory(&output[0], &output[16384])+digest_memory(&output[16384]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[2048][512];
int G2[2048+2][512];
__attribute__((noinline))
void example14(int A[][512], int coeff[][512], int *result) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 2048; i++)
        for (j = 0; j < 512; j++)
          sum += A[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][512]);
  init_memory(&G2[0][0],&G2[0][512]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[2]));
  return 0;
}


#include "header.h"
short short_a[512];
int   assign[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ short_a, int* __restrict__ assign) {
  int i;
  for (i = 0; i < 512-3; i+=4) {
    assign[i] = (int) short_a[i];
assign[i+1] = (int) short_a[i+1];
assign[i+2]= (int) short_a[i+2];
assign[i+3] = (int) short_a[i+3];
  }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0], &assign[512]);
  init_memory(&short_a[0], &short_a[512]);
  BENCH("Example10b", example10b(short_a,assign), Mi*4/512*512, digest_memory(&assign[0], &assign[512]));
  return 0;
}


#include "header.h"
int Output[128][512];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<128-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       Output[i][j] = y;
       Output[i+1][j] = y;
       Output[i][j+1] = y;
       Output[i+1][j+1] = y;
      }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][512]);
  BENCH("Example8",   example8(8), 16384, digest_memory(&Output[0][0], &Output[0][512]));
  return 0;
}


#include "header.h"
int assign[64][256];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<64-1; i+=2) {
     for (j=0; j<256-1; j+=2) {
       assign[i][j] = x;
       assign[i+1][j] = x;
       assign
====================
//generate_C_code) {
  int i;
  for (i=0; i<4096-1; i+=2){
     add[i] = (int) add[i+1];
   }
}
int main(int argc,char* argv[]){
  init_memory(&add[0], &add[4096]);
  init_memory(&in1[0], &in1[4096]);
   BENCH("Example2a",  example2a(2), Mi*4/4096*512, digest_memory(&add[0], &add[4096]));
  return 0;
}


#include "header.h"
int   ia[8192] ALIGNED16;
int op1[64][8192];
int op2[64][8192];
__attribute__((noinline))
void example13(int op1[][8192], int op2[][8192], int *out) {
  int i,j;
  for (i = 0; i < 64; i++) {
    int sum_mul = 0;
    for (j = 0; j < 8192; j+=8) {
      sum_mul += (op1[i][j] *op2[i][j]);
    }
    out[i] = sum_mul;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8192]);
  init_memory(&op1[0][0], &op1[0][8192]);
  init_memory(&op2[0][0],&op2[0][8192]);
  BENCH("Example13",  example13(op1,op2,ia), 256, digest_memory(&ia[0], &ia[8192]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
int in1[4096][1024];
int in2[4096][1024];
__attribute__((noinline))
void example13(int in1[][1024], int in2[][1024], int *out) {
  int i,j;
  for (i = 0; i < 4096; i++) {
    int res = 0;
    for (j = 0; j < 1024; j+=8) {
      res += (in1[i][j] +in2[i][j]);
    }
    out[i] = res;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[1024]);
  init_memory(&in1[0][0], &in1[0][1024]);
  init_memory(&in2[0][0],&in2[0][1024]);
  BENCH("Example13",  example13(in1,in2,ia), 512, digest_memory(&ia[0], &ia[1024]));
  return 0;
}


#include "header.h"
short input1[4096];
short input2[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 4096; i+=2) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[4096]);
  init_memory(&result2[0], &result2[4096]);
  init_memory(&input1[0], &input1[4096]);
  init_memory(&input2[0], &input2[4096]);
  BENCH("Example10b", example10b(input1,input2,result1,result2),
====================
//generate_C_code) {
  int i;
  for (i = 0; i < 2048; i+=2) {
    int result = 0;
    for (j = 0; j < 128; j+=8) {
      result += (A[i][j] *B[i][j]);
    }
    out[i] = result;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[128]);
  init_memory(&A[0][0], &A[0][128]);
  init_memory(&B[0][0],&B[0][128]);
  BENCH("Example13",  example13(A,B,ia), 65536, digest_memory(&ia[0], &ia[128]));
  return 0;
}


#include "header.h"
int   ia[2048] ALIGNED16;
int op1[16384][2048];
int op2[16384][2048];
__attribute__((noinline))
void example13(int op1[][2048], int op2[][2048], int *out) {
  int i,j;
  for (i = 0; i < 16384; i++) {
    int sum_sub = 0;
    for (j = 0; j < 2048; j+=8) {
      sum_sub += (op1[i][j] -op2[i][j]);
    }
    out[i] = sum_sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2048]);
  init_memory(&op1[0][0], &op1[0][2048]);
  init_memory(&op2[0][0],&op2[0][2048]);
  BENCH("Example13",  example13(op1,op2,ia), 4, digest_memory(&ia[0], &ia[2048]));
  return 0;
}


#include "header.h"
int   ia[128] ALIGNED16;
int in1[512][128];
int in2[512][128];
__attribute__((noinline))
void example13(int in1[][128], int in2[][128], int *out) {
  int i,j;
  for (i = 0; i < 512; i++) {
    int output = 0;
    for (j = 0; j < 128; j+=8) {
      output += (in1[i][j] +in2[i][j]);
    }
    out[i] = output;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[128]);
  init_memory(&in1[0][0], &in1[0][128]);
  init_memory(&in2[0][0],&in2[0][128]);
  BENCH("Example13",  example13(in1,in2,ia), 32768, digest_memory(&ia[0], &ia[128]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[4096][512];
int G2[4096+2][512];
__attribute__((noinline))
void example14(int A[][512], int coeff[][512], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 512; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0
====================
//generate_C_code())
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ ia, int* __restrict__ ib) {
  int i;
  for (i = 0; i < 256; i++) {
   ia[i] = (int) input1[i];
   ib[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&ib[0], &ib[256]);
  init_memory(&input1[0], &input1[256]);
  init_memory(&input2[0], &input2[256]);
  BENCH("Example10b", example10b(input1,input2,ia,ib), Mi*4/256*512, digest_memory(&ia[0], &ia[256])+digest_memory(&ib[0], &ib[256]));
  return 0;
}


#include "header.h"
int result[512][1024];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<512-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       result[i][j] = y;
       result[i+1][j] = y;
       result[i][j+1] = y;
       result[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][1024]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&result[0][0], &result[0][1024]));
  return 0;
}


#include "header.h"
short sa[4096];
short sb[4096];
short sc[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
int   result3[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, short *__restrict__ sc, int* __restrict__ result1, int* __restrict__ result2, int* __restrict__ result3) {
  int i;
  for (i = 0; i < 4096; i++) {
    result1[i] = (int) sa[i];
    result2[i] = (int) sb[i];
    result3[i] = (int) sc[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[4096]);
  init_memory(&result2[0], &result2[4096]);
  init_memory(&result3[0], &result3[4096]);
  init_memory(&sa[0], &sa[4096]);
  init_memory(&sb[0], &sb[4096]);
  init_memory(&sc[0], &sc[4096]);
  BENCH("Example10b", example10b(sa,sb,sc,result1,result2,result3), Mi*4/4096*512, digest_memory(&result1[0], &result1[4096])+digest_memory(&result2[0], &result2[4096])+digest_memory(&result3[0], &result3[4096]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[4096][2048];
int G2[4096+2][2048];
__attribute__((noinline))
void example14(int A[][2048], int coeff[][2048], int *out) {
  int k,j,i=0;
 
====================
//generate_C_code(short *__restrict__ sa, int* __restrict__ ia, int* __restrict__ ib, int* __restrict__ ic) {
  int i;
  for (i = 0; i < 128; i+=2) {
   ia[i] = (int) sa[i];
   ib[i] = (int) sa[i];
   ic[i] = (int) sa[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[128]);
  init_memory(&ib[0], &ib[128]);
  init_memory(&ic[0], &ic[128]);
  init_memory(&sa[0], &sa[128]);
  init_memory(&sb[0], &sb[128]);
  init_memory(&sc[0], &sc[128]);
  BENCH("Example10b", example10b(sa,sb,sc,ia,ib,ic), Mi*4/128*512, digest_memory(&ia[0], &ia[128])+digest_memory(&ib[0], &ib[128])+digest_memory(&ic[0], &ic[128]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][256];
int G2[4096+8][256];
__attribute__((noinline))
void example14(int A[][256], int coeff[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i++)
       for (j = 0; j < 256; j++)
        sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
short sa[128];
short sb[128];
int   result1[128] ALIGNED16;
int   result2[128] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 128; i++) {
    result1[i] = (int) sa[i];
    result2[i] = (int) sb[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[128]);
  init_memory(&result2[0], &result2[128]);
  init_memory(&sa[0], &sa[128]);
  init_memory(&sb[0], &sb[128]);
  BENCH("Example10b", example10b(sa,sb,result1,result2), Mi*4/128*512, digest_memory(&result1[0], &result1[128])+digest_memory(&result2[0], &result2[128]));
  return 0;
}


#include "header.h"
short in1[512];
short in2[512];
short in3[512];
int   out1[512] ALIGNED16;
int   out2[512] ALIGNED16;
int   out3[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ in1, short *__restrict__ in2, int* __restrict__ out1,
====================
//generate_C_code(&result1[0], &result1[16384]);
  init_memory(&result2[0], &result2[16384]);
  init_memory(&result3[0], &result3[16384]);
  init_memory(&sa[0], &sa[16384]);
  init_memory(&sb[0], &sb[16384]);
  init_memory(&sc[0], &sc[16384]);
  BENCH("Example10a", example10a(sa,sb,sc,result1,result2,result3), Mi/16384*512, digest_memory(&result1[0], &result1[16384]) + digest_memory(&result2[0], &result2[16384]) + digest_memory(&result3[0], &result3[16384]));
  return 0;
}


#include "header.h"
int   ia[64] ALIGNED16;
__attribute__((noinline))
void example21(int *in_array, int n) {
  int i, mul = 1;
  for (i = n-1; i >= 0; i--)
    mul *= in_array[i];
  in_array[0] = mul;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  BENCH("Example21",  example21(ia, 64), Mi/64*512, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[1024][512];
int G2[1024+2][512];
__attribute__((noinline))
void example14(int in[][512], int coeff[][512], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int result = 0;
    for (i = 0; i < 1024; i++)
       for (j = 0; j < 512; j++)
         result += in[i+k][j] * coeff[i][j];
    out[k] = result;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][512]);
  init_memory(&G2[0][0],&G2[0][512]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[2]));
  return 0;
}


#include "header.h"
int assign[8192][1024];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<8192-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][1024]);
  BENCH("Example8",   example8(8), 128, digest_memory(&assign[0][0], &assign[0][1024]));
  return 0;
}


#include "header.h"
short sa[4096];
short sb[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, int* __restrict__ result1, int* __restrict__ result2) {
  int i
====================
//generate_C_code(assign1,assign2,assign3), Mi*4/512*512, digest_memory(&assign1[0], &assign1[512])+digest_memory(&assign2[0], &assign2[512])+digest_memory(&assign3[0], &assign3[512]));
  return 0;
}


#include "header.h"
int input[512] ALIGNED16;
int result[512] ALIGNED16;
__attribute__((noinline))
void  example7 (int x) {
   int i;
   
   for (i=0; i<512-x; i++){
      result[i] -= input[i+x];
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0], &result[512]);
  init_memory(&input[0], &input[512]);
  BENCH("Example7",   example7(4), Mi/512*512, digest_memory(&result[0], &result[512]));
  return 0;
}


#include "header.h"
int   ia[128] ALIGNED16;
int op1[256][128];
int op2[256][128];
__attribute__((noinline))
void example13(int op1[][128], int op2[][128], int *out) {
  int i,j;
  for (i = 0; i < 256; i++) {
    int sum_sub = 0;
    for (j = 0; j < 128; j+=8) {
      sum_sub += (op1[i][j] -op2[i][j]);
    }
    out[i] = sum_sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[128]);
  init_memory(&op1[0][0], &op1[0][128]);
  init_memory(&op2[0][0],&op2[0][128]);
  BENCH("Example13",  example13(op1,op2,ia), 2048, digest_memory(&ia[0], &ia[128]));
  return 0;
}


#include "header.h"
int result[128] ALIGNED16;
int in1[128] ALIGNED16;
int in2[128] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<128-4; i++){
      result[i] = in1[i+1] *in2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0], &result[128]);
  init_memory(&in1[0], &in1[128]);
  init_memory(&in2[0], &in2[128]);
  BENCH("Example4b",  example4b(), Mi*2/128*512, digest_memory(&result[0], &result[128]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int op1[256][256];
int op2[256][256];
__attribute__((noinline))
void example13(int op1[][256], int op2[][256], int *out) {
  int i,j;
  for (i = 0; i < 256; i++) {
    int sum_add = 0;
    for (j = 0; j < 256; j+=8) {
      sum_add += (op1[i][j] +op2[i][j]);
    }
    out[i] = sum_add;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&op1[0][0], &op1[0][256]);
  init_memory
====================
//generate_C_code(G,G2,G,ia,ib,ic), Mi/64*512, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
int op1[16384][1024];
int op2[16384][1024];
__attribute__((noinline))
void example13(int op1[][1024], int op2[][1024], int *out) {
  int i,j;
  for (i = 0; i < 16384; i++) {
    int sum_mul = 0;
    for (j = 0; j < 1024; j+=8) {
      sum_mul += (op1[i][j] *op2[i][j]);
    }
    out[i] = sum_mul;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[1024]);
  init_memory(&op1[0][0], &op1[0][1024]);
  init_memory(&op2[0][0],&op2[0][1024]);
  BENCH("Example13",  example13(op1,op2,ia), 1024, digest_memory(&ia[0], &ia[1024]));
  return 0;
}


#include "header.h"
int   ia[16384] ALIGNED16;
int A[16384][16384];
int B[16384][16384];
__attribute__((noinline))
void example13(int A[][16384], int B[][16384], int *out) {
  int i,j;
  for (i = 0; i < 16384; i++) {
    int sub = 0;
    for (j = 0; j < 16384; j+=8) {
      sub += (A[i][j] -B[i][j]);
    }
    out[i] = sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[16384]);
  init_memory(&A[0][0], &A[0][16384]);
  init_memory(&B[0][0],&B[0][16384]);
  BENCH("Example13",  example13(A,B,ia), 32, digest_memory(&ia[0], &ia[16384]));
  return 0;
}


#include "header.h"
int   ia[128] ALIGNED16;
__attribute__((noinline))
void example21(int *in_array, int n) {
  int i, sub = 0;
  for (i = n-1; i >= 0; i--)
    sub -= in_array[i];
  in_array[0] = sub;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[128]);
  BENCH("Example21",  example21(ia, 128), Mi/128*512, digest_memory(&ia[0], &ia[128]));
  return 0;
}


#include "header.h"
short input[256];
int   out[256] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input, int* __restrict__ out) {
  int i;
  for (i = 0; i < 256; i+=2) {
    out[i] = (int) input[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&out[0], &out[256]);
  init_memory(&input[0], &input[256]);
  BENCH("Example10b", example10b(input,out), Mi*4/256*512, digest_memory(&out[0], &out[256]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[16384][1024];
int G2[16
====================
//generate_C_code<int, int*>(), Mi*4/4096*512, digest_memory(&output[0], &output[4096]));
  return 0;
}


#include "header.h"
int Output[64][1024];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<64-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       Output[i][j] = x;
       Output[i+1][j] = x;
       Output[i][j+1] = x;
       Output[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][1024]);
  BENCH("Example8",   example8(8), 8192, digest_memory(&Output[0][0], &Output[0][1024]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[8192][1024];
int G2[8192+8][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int dot_product = 0;
    for (i = 0; i < 8192; i++)
       for (j = 0; j < 1024; j++)
        dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
short input1[1024];
short input2[1024];
short input3[1024];
int   result1[1024] ALIGNED16;
int   result2[1024] ALIGNED16;
int   result3[1024] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, short *__restrict__ input3, int* __restrict__ result1, int* __restrict__ result2, int* __restrict__ result3) {
  int i;
  for (i = 0; i < 1024; i++) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
    result3[i] = (int) input3[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[1024]);
  init_memory(&result2[0], &result2[1024]);
  init_memory(&result3[0], &result3[1024]);
  init_memory(&input1[0], &input1[1024]);
  init_memory(&input2[0], &input2[1024]);
  init_memory(&input3[0], &input3[1024]);
  BENCH("Example10b", example10b(input1,input2,input3,result1,result2,result3), Mi*4/1024*512, digest_memory(&result1[0], &result1[1024])+digest_memory(&result2[0], &result2[1024])+digest_memory(&result3[0], &result3[1024]));
 
====================
//generate_C_code (input, result))
  return 0;
}


#include "header.h"
int   ia[4];
int G[64][128];
int G2[64+4][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 64; i++)
        for (j = 0; j < 128; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 32768, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[2048][256];
int G2[2048+8][256];
__attribute__((noinline))
void example14(int in[][256], int coeff[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int dot_product = 0;
    for (i = 0; i < 2048; i++)
       for (j = 0; j < 256; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 512, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int   ia[8192] ALIGNED16;
int op1[128][8192];
int op2[128][8192];
__attribute__((noinline))
void example13(int op1[][8192], int op2[][8192], int *out) {
  int i,j;
  for (i = 0; i < 128; i++) {
    int sum_add = 0;
    for (j = 0; j < 8192; j+=8) {
      sum_add += (op1[i][j] +op2[i][j]);
    }
    out[i] = sum_add;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8192]);
  init_memory(&op1[0][0], &op1[0][8192]);
  init_memory(&op2[0][0],&op2[0][8192]);
  BENCH("Example13",  example13(op1,op2,ia), 32768, digest_memory(&ia[0], &ia[8192]));
  return 0;
}


#include "header.h"
short short_a[128];
int   result[128] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ short_a, int* __restrict__ result) {
  int i;
  for (i = 0; i < 128-3; i+=4) {
    result[i] = (int) short_
====================
//generate_C_code(&G2, &G2, &G2, &G2));
  BENCH("Example4b",  example4b(), Mi*2/G2/64*512, digest_memory(&G2[0], &G2[64]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[256][1024];
int G2[256+8][1024];
__attribute__((noinline))
void example14(int A[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 256; i++)
        for (j = 0; j < 1024; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 4096, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int op1[64][256];
int op2[64][256];
__attribute__((noinline))
void example13(int op1[][256], int op2[][256], int *out) {
  int i,j;
  for (i = 0; i < 64; i++) {
    int sum_mul = 0;
    for (j = 0; j < 256; j+=8) {
      sum_mul += (op1[i][j] *op2[i][j]);
    }
    out[i] = sum_mul;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&op1[0][0], &op1[0][256]);
  init_memory(&op2[0][0],&op2[0][256]);
  BENCH("Example13",  example13(op1,op2,ia), 32768, digest_memory(&ia[0], &ia[256]));
  return 0;
}


#include "header.h"
int assign[256][512];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<256-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       assign[i][j] = x;
       assign[i+1][j] = x;
       assign[i][j+1] = x;
       assign[i+1][j+1] = x;
      }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][512]);
  BENCH("Example8",   example8(8), 1024, digest_memory(&assign[0][0], &assign[0][512]));
  return 0;
}


#include "header.h"
int   ia[128] ALIGNED16;
int A[2048][128];
int B[2048][128];
__attribute__((noinline))
void example13(int A[][128], int B[][128], int *out) {
  int i,j;
  for (i = 0; i < 2048; i++) {
    int sub = 0;
    for (j = 0
====================
//generate_C_code(&short_a[0], &short_a[64]);
  BENCH("Example10b", example10b(short_a,out), Mi*4/64*512, digest_memory(&out[0], &out[64]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[512][4096];
int G2[512+4][4096];
__attribute__((noinline))
void example14(int in[][4096], int coeff[][4096], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 4096; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][4096]);
  init_memory(&G2[0][0],&G2[0][4096]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[8192][16384];
int G2[8192+8][16384];
__attribute__((noinline))
void example14(int in[][16384], int coeff[][16384], int *result) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 8192; i++)
        for (j = 0; j < 16384; j++)
          sum += in[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][16384]);
  init_memory(&G2[0][0],&G2[0][16384]);
  BENCH("Example14",  example14(G2,G,ia), 32, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[128][1024];
int G2[128+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 128; i++)
        for (j = 0; j < 1024; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 4096, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int output[256] ALIGNED16;
__attribute__((noinline))
void example2a (int x) {
  
====================
//generate_C_code(G[0][0], &G[0][128]));
  return 0;
}


#include "header.h"
int o[4192] ALIGNED16;
int i1[4192] ALIGNED16;
int i2[4192] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<4192-4; i++){
      o[i] = i1[i+1] *i2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&o[0], &o[4192]);
  init_memory(&i1[0], &i1[4192]);
  BENCH("Example4b",  example4b(), Mi*2/4*512, digest_memory(&o[0], &o[4192]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[256][1024];
int G2[256+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *result) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 256; i++)
        for (j = 0; j < 1024; j++)
         sum += in[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
short input1[256];
short input2[256];
int   result1[256] ALIGNED16;
int   result2[256] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 256; i+=2) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[256]);
  init_memory(&result2[0], &result2[256]);
  init_memory(&input1[0], &input1[256]);
  init_memory(&input2[0], &input2[256]);
  BENCH("Example10b", example10b(input1,input2,result1,result2), Mi*4/256*512, digest_memory(&result1[0], &result1[256])+digest_memory(&result2[0], &result2[256]));
  return 0;
}


#include "header.h"
int result[64] ALIGNED16;
int in1[64] ALIGNED16;
int in2[64] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<64-4; i++){
      result[i] = in1[i+1] *in2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0], &result[64]);
  init_memory(&in1[0], &in1
====================
//generate_C_code(assign1,assign2,assign3,assign4,assign5,assign6,result1,assign1,assign2,assign3,assign4,assign5), Mi*4/16384*512, digest_memory(&assign1[0], &assign1[16384])+digest_memory(&assign2[0], &assign2[16384])+digest_memory(&assign3[0], &assign3[16384]));
  return 0;
}


#include "header.h"
short input1[128];
short input2[128];
int   out1[128] ALIGNED16;
int   out2[128] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ out1, int* __restrict__ out2) {
  int i;
  for (i = 0; i < 128-1; i+=2) {
    out1[i] = (int) input1[i];
out1[i+1] = (int) input1[i+1];
    out2[i] = (int) input2[i];
out2[i+1] = (int) input2[i+1];
  }
}
int main(int argc,char* argv[]){
  init_memory(&out1[0], &out1[128]);
  init_memory(&out2[0], &out2[128]);
  init_memory(&input1[0], &input1[128]);
  init_memory(&input2[0], &input2[128]);
  BENCH("Example10b", example10b(input1,input2,out1,out2), Mi*4/128*512, digest_memory(&out1[0], &out1[128])+digest_memory(&out2[0], &out2[128]));
  return 0;
}


#include "header.h"
int Output[4096][1024];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<4096-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       Output[i][j] = y;
       Output[i+1][j] = y;
       Output[i][j+1] = y;
       Output[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][1024]);
  BENCH("Example8",   example8(8), 256, digest_memory(&Output[0][0], &Output[0][1024]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[128][1024];
int G2[128+8][1024];
__attribute__((noinline))
void example14(int A[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 128; i++)
        for (j = 0; j < 1024; j++)
         sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &
====================
//generate_C_code(input1,input2,input3,out1,out2,out3), Mi*4/16384*512, digest_memory(&out1[0], &out1[16384])+digest_memory(&out2[0], &out2[16384])+digest_memory(&out3[0], &out3[16384]));
  return 0;
}


#include "header.h"
int   ia[4096] ALIGNED16;
int op1[1024][4096];
int op2[1024][4096];
__attribute__((noinline))
void example13(int op1[][4096], int op2[][4096], int *out) {
  int i,j;
  for (i = 0; i < 1024; i++) {
    int sum_mul = 0;
    for (j = 0; j < 4096; j+=8) {
      sum_mul += (op1[i][j] *op2[i][j]);
    }
    out[i] = sum_mul;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4096]);
  init_memory(&op1[0][0], &op1[0][4096]);
  init_memory(&op2[0][0],&op2[0][4096]);
  BENCH("Example13",  example13(op1,op2,ia), 2048, digest_memory(&ia[0], &ia[4096]));
  return 0;
}


#include "header.h"
short input1[16384];
short input2[16384];
int   result1[16384] ALIGNED16;
int   result2[16384] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 16384; i+=2) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[16384]);
  init_memory(&result2[0], &result2[16384]);
  init_memory(&input1[0], &input1[16384]);
  init_memory(&input2[0], &input2[16384]);
  BENCH("Example10b", example10b(input1,input2,result1,result2), Mi*4/16384*512, digest_memory(&result1[0], &result1[16384])+digest_memory(&result2[0], &result2[16384]));
  return 0;
}


#include "header.h"
int output[1024] ALIGNED16;
int input1[1024] ALIGNED16;
int input2[1024] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<1024-4; i++){
      output[i] = input1[i+1] +input2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[1024]);
  init_memory(&input1[0], &input1[1024]);
  init_memory(&input2[0], &input2[1024]);
  BENCH("Example4b",  example4b(), Mi*2/1024*512, digest_memory(&output[0], &output[1024]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
int A[256][1024];
int B[256][1024];
__attribute__((noinline))
void example13(int A[][1024], int B[][1024], int *out)
====================
//generate_C_code(G[0][0], &G[0][512]);
  BENCH("Example8",   example8(8), 32, digest_memory(&G[0][0], &G[0][512]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][1024];
int G2[4096+8][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 1024; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 64, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[16384][1024];
int G2[16384+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 16384; i++)
       for (j = 0; j < 1024; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 64, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[128][8192];
int G2[128+2][8192];
__attribute__((noinline))
void example14(int in[][8192], int coeff[][8192], int *result) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 128; i++)
        for (j = 0; j < 8192; j++)
          sum += in[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][8192]);
  init_memory(&G2[0][0],&G2[0][8192]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[2]));
  return 0;
}


#include "header.h"
short input1[16384];
short input2[16384];
short input3[16384];
int   ia[16384] ALIGNED16;
int   ib
====================
//generate_C_code(in,j,ia), Mi*4/512*512, digest_memory(&ia[0], &ia[512])+digest_memory(&ib[0], &ib[512])+digest_memory(&ic[0], &ic[512]));
  return 0;
}


#include "header.h"
int   ia[64] ALIGNED16;
int A[8192][64];
int B[8192][64];
__attribute__((noinline))
void example13(int A[][64], int B[][64], int *out) {
  int i,j;
  for (i = 0; i < 8192; i++) {
    int sub = 0;
    for (j = 0; j < 64; j+=8) {
      sub += (A[i][j] -B[i][j]);
    }
    out[i] = sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  init_memory(&A[0][0], &A[0][64]);
  init_memory(&B[0][0],&B[0][64]);
  BENCH("Example13",  example13(A,B,ia), 65536, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[4096][16384];
int G2[4096+2][16384];
__attribute__((noinline))
void example14(int A[][16384], int coeff[][16384], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i+=2) {
      sum += A[i+k][j] * coeff[i][j];
     out[k] = sum;
   }
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][16384]);
  init_memory(&G2[0][0],&G2[0][16384]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[2]));
  return 0;
}


#include "header.h"
int output[16384] ALIGNED16;
__attribute__((noinline))
void example2a (int y) {
   int i;
   
   
   for (i=0; i< 16384-1 ; i+=2) {
       output[i] = y;
    }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[16384]);
  BENCH("Example2a",  example2a(2), Mi*4/16384*512, digest_memory(&output[0], &output[16384]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[128][8192];
int G2[128+2][8192];
__attribute__((noinline))
void example14(int in[][8192], int coeff[][8192], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int dot_product = 0;
    for (i = 0; i < 128; i++)
        for (j = 0; j < 8192; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia
====================
//generate_C_code[0], &input1[128]);
  init_memory(&input2[0], &input2[128]);
  init_memory(&input3[0], &input3[128]);
  init_memory(&input4[0], &input4[128]);
  BENCH("Example10b", example10b(input1,input2,input3,out1,out2,out3), Mi*4/128*512, digest_memory(&out1[0], &out1[128])+digest_memory(&out2[0], &out2[128])+digest_memory(&out3[0], &out3[128]));
  return 0;
}


#include "header.h"
int   ia[512] ALIGNED16;
__attribute__((noinline))
void example21(int *i1, int n) {
  int i, out = 0;
  for (i = n-1; i >= 0; i--)
    out -= i1[i];
  i1[0] = out;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[512]);
  BENCH("Example21",  example21(ia, 512), Mi/512*512, digest_memory(&ia[0], &ia[512]));
  return 0;
}


#include "header.h"
int Output[8192][512];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<8192-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       Output[i][j] = x;
       Output[i+1][j] = x;
       Output[i][j+1] = x;
       Output[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][512]);
  BENCH("Example8",   example8(8), 16384, digest_memory(&Output[0][0], &Output[0][512]));
  return 0;
}


#include "header.h"
int output[256] ALIGNED16;
int input1[256] ALIGNED16;
int input2[256] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<256-4; i++){
      output[i] = input1[i+1] +input2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[256]);
  init_memory(&input1[0], &input1[256]);
  init_memory(&input2[0], &input2[256]);
  BENCH("Example4b",  example4b(), Mi*2/256*512, digest_memory(&output[0], &output[256]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][8192];
int G2[4096+8][8192];
__attribute__((noinline))
void example14(int A[][8192], int coeff[][8192], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 8192; j++)
         sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia
====================
//generate_C_code(input, &input[0][128]));
  return 0;
}


#include "header.h"
int assign[4096][512];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<4096-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][512]);
  BENCH("Example8",   example8(8), 4096, digest_memory(&assign[0][0], &assign[0][512]));
  return 0;
}


#include "header.h"
int assign[256][256];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<256-1; i+=2) {
     for (j=0; j<256-1; j+=2) {
       assign[i][j] = x;
       assign[i+1][j] = x;
       assign[i][j+1] = x;
       assign[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][256]);
  BENCH("Example8",   example8(8), 4096, digest_memory(&assign[0][0], &assign[0][256]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[256][512];
int G2[256+4][512];
__attribute__((noinline))
void example14(int in[][512], int coeff[][512], int *result) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 256; i++)
        for (j = 0; j < 512; j++)
          sum += in[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][512]);
  init_memory(&G2[0][0],&G2[0][512]);
  BENCH("Example14",  example14(G2,G,ia), 16384, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
short sa[512];
short sb[512];
short sc[512];
int   assign1[512] ALIGNED16;
int   assign2[512] ALIGNED16;
int   assign3[512] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, short *__restrict__ sc, int* __restrict__ assign1, int* __restrict__ assign2, int* __restrict__ assign3) {
  int i;
  for (i = 0; i < 512; i+=2) {
    assign1[i] = (int) sa[i];
    assign2[i] = (int) sb[i];
 
====================
//generate_C_code) {
  int i;
  for (i = 0; i < 2048; i++) {
    result[i] = (int) input[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result[0], &result[2048]);
  init_memory(&input[0], &input[2048]);
  BENCH("Example10b", example10b(input,result), Mi*4/2048*512, digest_memory(&result[0], &result[2048]));
  return 0;
}


#include "header.h"
int Output[512][16384];
__attribute__((noinline))
void example8 (int z) {
   int i,j;
   
   for (i=0; i<512-1; i+=2) {
     for (j=0; j<16384-1; j+=2) {
       Output[i][j] = z;
       Output[i+1][j] = z;
       Output[i][j+1] = z;
       Output[i+1][j+1] = z;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][16384]);
  BENCH("Example8",   example8(8), 512, digest_memory(&Output[0][0], &Output[0][16384]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[128][128];
int G2[128+4][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 128; i++)
       for (j = 0; j < 128; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
__attribute__((noinline))
void example21(int *input, int n) {
  int i, sum = 0;
  for (i = n-1; i >= 0; i--)
    sum += input[i];
  input[0] = sum;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[1024]);
  BENCH("Example21",  example21(ia, 1024), Mi*4/1024*512, digest_memory(&ia[0], &ia[1024]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int op1[8192][256];
int op2[8192][256];
__attribute__((noinline))
void example13(int op1[][256], int op2[][256], int *out) {
  int i,j;
  for (i = 0; i < 8192; i++) {
    int sum_add = 0;
    for (j = 0; j < 256; j+=8) {
      sum_add += (op1[i][j] +op2[i][j]);
    }
 
====================
//generate_C_code) {
  int i;
  for (i = 0; i < 4; i+=2) {
     assign[i] = (int) input1[i];
     assign[i+1] = (int) input1[i+1];
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0], &assign[4]);
  init_memory(&input1[0], &input1[4]);
  BENCH("Example10b", example10b(input1,assign), Mi*4/4*512, digest_memory(&assign[0], &assign[4]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][1024];
int G2[4096+8][1024];
__attribute__((noinline))
void example14(int A[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 1024; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[8192][256];
int G2[8192+4][256];
__attribute__((noinline))
void example14(int in[][256], int coeff[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 8192; i++)
        for (j = 0; j < 256; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 256, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int op1[4096][256];
int op2[4096][256];
__attribute__((noinline))
void example13(int op1[][256], int op2[][256], int *out) {
  int i,j;
  for (i = 0; i < 4096; i++) {
    int sum_add = 0;
    for (j = 0; j < 256; j+=8) {
      sum_add += (op1[i][j] +op2[i][j]);
    }
    out[i] = sum_add;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&op1[0][0], &op1[0][256]);
  init_memory(&op2[0][0],&op2[0][
====================
//generate_C_code(result1,i1,i2,i3,result1,i2,i3), Mi/2048*512, digest_memory(&result1[0], &result1[2048])+digest_memory(&result2[0], &result2[2048])+digest_memory(&result3[0], &result3[2048]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[512][64];
int G2[512+4][64];
__attribute__((noinline))
void example14(int in[][64], int coeff[][64], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 64; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][64]);
  init_memory(&G2[0][0],&G2[0][64]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int Output[64][256];
__attribute__((noinline))
void example8 (int z) {
   int i,j;
   
   for (i=0; i<64-1; i+=2) {
     for (j=0; j<256-1; j+=2) {
       Output[i][j] = z;
       Output[i+1][j] = z;
       Output[i][j+1] = z;
       Output[i+1][j+1] = z;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][256]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&Output[0][0], &Output[0][256]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[4096][128];
int G2[4096+4][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 128; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 4096, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[256] ALIGNED16;
int op1[2048][256];
int op2[2048][256];
__attribute__((noinline))
void example13(int op1[][256], int op2[][256], int *out) {
====================
//generate_C_code(assign1,assign2,assign3), Mi*4/1024*512, digest_memory(&assign1[0], &assign1[1024])+digest_memory(&assign2[0], &assign2[1024])+digest_memory(&assign3[0], &assign3[1024]));
  return 0;
}


#include "header.h"
short input1[4096];
short input2[4096];
short input3[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
int   result3[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, short *__restrict__ input3, int* __restrict__ result1, int* __restrict__ result2, int* __restrict__ result3) {
  int i;
  for (i = 0; i < 4096-1; i+=2) {
    result1[i] = (int) input1[i];
result1[i+1] = (int) input1[i+1];
    result2[i] = (int) input2[i];
result2[i+1] = (int) input2[i+1];
    result3[i] = (int) input3[i];
result3[i+1] = (int) input3[i+1];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[4096]);
  init_memory(&result2[0], &result2[4096]);
  init_memory(&result3[0], &result3[4096]);
  init_memory(&input1[0], &input1[4096]);
  init_memory(&input2[0], &input2[4096]);
  init_memory(&input3[0], &input3[4096]);
  BENCH("Example10b", example10b(input1,input2,input3,result1,result2,result3), Mi*4/4096*512, digest_memory(&result1[0], &result1[4096])+digest_memory(&result2[0], &result2[4096])+digest_memory(&result3[0], &result3[4096]));
  return 0;
}


#include "header.h"
short input1[64];
short input2[64];
int   out1[64] ALIGNED16;
int   out2[64] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ out1, int* __restrict__ out2) {
  int i;
  for (i = 0; i < 64-1; i+=2) {
    out1[i] = (int) input1[i];
out1[i+1] = (int) input1[i+1];
    out2[i] = (int) input2[i];
out2[i+1] = (int) input2[i+1];
  }
}
int main(int argc,char* argv[]){
  init_memory(&out1[0], &out1[64]);
  init_memory(&out2[0], &out2[64]);
  init_memory(&input1[0], &input1[64]);
  init_memory(&input2[0], &input2[64]);
  BENCH("Example10b", example10b(input1,input2,out1,out2), Mi*4/64*512, digest_memory(&out1[0], &out1[64])+digest_memory(&out2[0], &out2[64]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][8192];
int G2[4096+8][8192];
__attribute__((noinline))
void example14(int in[][8192],
====================
//generate_C_code(G[0][0], G[0][8192]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[64][256];
int G2[64+4][256];
__attribute__((noinline))
void example14(int mat1[][256], int mat2[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 64; i++)
        for (j = 0; j < 256; j++)
          sum += mat1[i+k][j] * mat2[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 8192, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[128][64];
int G2[128+4][64];
__attribute__((noinline))
void example14(int in[][64], int coeff[][64], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int result = 0;
    for (i = 0; i < 128; i++)
       for (j = 0; j < 64; j++)
        result += in[i+k][j] * coeff[i][j];
    out[k] = result;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][64]);
  init_memory(&G2[0][0],&G2[0][64]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[1024] ALIGNED16;
__attribute__((noinline))
void example21(int *in_array, int n) {
  int i, sub = 0;
  for (i = n-1; i >= 0; i--)
    sub -= in_array[i];
  in_array[0] = sub;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[1024]);
  BENCH("Example21",  example21(ia, 1024), Mi/1024*512, digest_memory(&ia[0], &ia[1024]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[4096][1024];
int G2[4096+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 1024; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &
====================
//generate_C_code(input1,input2,input3,result1,result2,result3), Mi*4/64*512, digest_memory(&result1[0], &result1[64])+digest_memory(&result2[0], &result2[64])+digest_memory(&result3[0], &result3[64]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[64][8192];
int G2[64+8][8192];
__attribute__((noinline))
void example14(int A[][8192], int coeff[][8192], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 64; i++)
        for (j = 0; j < 8192; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][8192]);
  init_memory(&G2[0][0],&G2[0][8192]);
  BENCH("Example14",  example14(G2,G,ia), 65536, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
short sa[2048];
short sb[2048];
int   result1[2048] ALIGNED16;
int   result2[2048] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 2048; i++) {
    result1[i] = (int) sa[i];
    result2[i] = (int) sb[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[2048]);
  init_memory(&result2[0], &result2[2048]);
  init_memory(&sa[0], &sa[2048]);
  init_memory(&sb[0], &sb[2048]);
  BENCH("Example10b", example10b(sa,sb,result1,result2), Mi*4/2048*512, digest_memory(&result1[0], &result1[2048])+digest_memory(&result2[0], &result2[2048]));
  return 0;
}


#include "header.h"
short input1[256];
short input2[256];
int   out1[256] ALIGNED16;
int   out2[256] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ out1, int* __restrict__ out2) {
  int i;
  for (i = 0; i < 256; i+=2) {
    out1[i] = (int) input1[i];
    out2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&out1[0], &out1[256]);
  init_memory(&out2[0], &out2[256]);
  init_memory(&input1[0], &input1[256]);
  init_memory(&input2[0], &input2[256]);
  BENCH("Example10b", example10b(input1,input2,out1,out2), Mi*4/256*512, digest_memory(&out1[0], &out1[256])+digest_memory(&out2[0], &
====================
//generate_C_code))
void example10b(short *__restrict__ input, int* __restrict__ result) {
  int i;
  for (i = 0; i < 16384-1; i+=2) {
    result[i] = (int) input[i];
result[i+1] = (int) input[i+1];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result[0], &result[16384]);
  init_memory(&input[0], &input[16384]);
  BENCH("Example10b", example10b(input,result), Mi*4/16384*512, digest_memory(&result[0], &result[16384]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[512][1024];
int G2[512+8][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *result) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 1024; j++)
          sum += in[i+k][j] * coeff[i][j];
    result[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int Output[8192][512];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<8192-1; i+=2) {
     for (j=0; j<512-1; j+=2) {
       Output[i][j] = y;
       Output[i+1][j] = y;
       Output[i][j+1] = y;
       Output[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][512]);
  BENCH("Example8",   example8(8), 256, digest_memory(&Output[0][0], &Output[0][512]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[4096][1024];
int G2[4096+8][1024];
__attribute__((noinline))
void example14(int mat1[][1024], int mat2[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 1024; j++)
          sum += mat1[i+k][j] * mat2[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 65536, digest_memory(&ia[0], &ia
====================
//generate_C_code(__attribute__((noinline)));
  return 0;
}


#include "header.h"
int output1[8192] ALIGNED16;
int input1[8192] ALIGNED16;
int input2[8192] ALIGNED16;
int output2[8192] ALIGNED16;
__attribute__((noinline))
void example11() {
   int i;
  for (i = 0; i < 8192/4; i++){
    output1[i] = input1[2*i+1] * input2[2*i+1] - input1[2*i] * input2[2*i];
    output2[i] = input1[2*i] * input2[2*i+1] * input1[2*i+1] * input2[2*i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&output1[0], &output1[8192]);
  init_memory(&input1[0], &input1[8192]);
  init_memory(&input2[0], &input2[8192]);
  init_memory(&output2[0], &output2[8192]);
  BENCH("Example11",  example11(), Mi*4/8192*256, digest_memory(&output2[0], &output2[8192]));
  return 0;
}


#include "header.h"
int assign[128][8192];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<128-1; i+=2) {
     for (j=0; j<8192-1; j+=2) {
       assign[i][j] = x;
       assign[i+1][j] = x;
       assign[i][j+1] = x;
       assign[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][8192]);
  BENCH("Example8",   example8(8), 16, digest_memory(&assign[0][0], &assign[0][8192]));
  return 0;
}


#include "header.h"
int assign[128][128];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<128-1; i+=2) {
     for (j=0; j<128-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
      }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][128]);
  BENCH("Example8",   example8(8), 16384, digest_memory(&assign[0][0], &assign[0][128]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[4096][1024];
int G2[4096+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 1024; j++)
          dot_product += in[i+k][j
====================
//generate_C_code(G[0][0], &G[0][128]);
  BENCH("Example8",   example8(8), 16384, digest_memory(&G[0][0], &G[0][128]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[512][512];
int G2[512+8][512];
__attribute__((noinline))
void example14(int A[][512], int coeff[][512], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int sum = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 512; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][512]);
  init_memory(&G2[0][0],&G2[0][512]);
  BENCH("Example14",  example14(G2,G,ia), 256, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
short input1[8192];
short input2[8192];
int   i1[8192] ALIGNED16;
int   i2[8192] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ i1, int* __restrict__ i2) {
  int i;
  for (i = 0; i < 8192; i++) {
    i1[i] = i1[i] + i2[i];
    i2[i] = (int) input1[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&i1[0], &i1[8192]);
  init_memory(&i2[0], &i2[8192]);
  init_memory(&input1[0], &input1[8192]);
  init_memory(&input2[0], &input2[8192]);
  BENCH("Example10b", example10b(input1,input2,i1,i2), Mi*4/8192*512, digest_memory(&i1[0], &i1[8192])+digest_memory(&input2[0], &input2[8192]));
  return 0;
}


#include "header.h"
int out[512] ALIGNED16;
int in1[512] ALIGNED16;
int in2[512] ALIGNED16;
__attribute__((noinline))
void example4b () {
   int i;
   
   for (i=0; i<512-4; i++){
      out[i] = in1[i+1] -in2[i+3];
   }
}
int main(int argc,char* argv[]){
  init_memory(&out[0], &out[512]);
  init_memory(&in1[0], &in1[512]);
  init_memory(&in2[0], &in2[512]);
  BENCH("Example4b",  example4b(), Mi*2/512*512, digest_memory(&out[0], &out[512]));
  return 0;
}


#include "header.h"
short sa[4096];
short sb[4096];
short sc[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
int   result3[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__
====================
//generate_C_code(&G[0][0], &G[0][128]);
  BENCH("Example13",  example13(G[0][0], &G[0][128]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[8192][128];
int G2[8192+4][128];
__attribute__((noinline))
void example14(int A[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 8192; i++)
        for (j = 0; j < 128; j++)
          sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 8, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
short short_a[1024];
short short_b[1024];
int   result1[1024] ALIGNED16;
int   result2[1024] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ short_a, short *__restrict__ short_b, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 1024; i++) {
    result1[i] = (int) short_a[i];
    result2[i] = (int) short_b[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[1024]);
  init_memory(&result2[0], &result2[1024]);
  init_memory(&short_a[0], &short_a[1024]);
  init_memory(&short_b[0], &short_b[1024]);
  BENCH("Example10b", example10b(short_a,short_b,result1,result2), Mi*4/1024*512, digest_memory(&result1[0], &result1[1024])+digest_memory(&result2[0], &result2[1024]));
  return 0;
}


#include "header.h"
int   ia[2048] ALIGNED16;
int in1[512][2048];
int in2[512][2048];
__attribute__((noinline))
void example13(int in1[][2048], int in2[][2048], int *out) {
  int i,j;
  for (i = 0; i < 512; i++) {
    int res = 0;
    for (j = 0; j < 2048; j+=8) {
      res += (in1[i][j] -in2[i][j]);
     }
    out[i] = res;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2048]);
  init_memory(&in1[0][0], &in1[0][2048]);
  init_memory(&in2[0][0],&in2[0][2048]);
  BENCH("Example13",  example13(in1,in2,ia), 65536, digest_memory(&ia[0], &ia[2048]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[1024][1024];
int G2[1024+4][1024];
__attribute__((noinline))

====================
//generate_C_code) {
  int i;
  for (i = 0; i < 4096-1; i+=2) {
     out[i] = (int) input[i];
out[i+1] = input[i+1];
   }
}
int main(int argc,char* argv[]){
  init_memory(&out[0], &out[4096]);
  init_memory(&input[0], &input[4096]);
  BENCH("Example10b", example10b(input,out), Mi*4/4096*512, digest_memory(&out[0], &out[4096]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[8192][8192];
int G2[8192+4][8192];
__attribute__((noinline))
void example14(int in[][8192], int coeff[][8192], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 8192; i++)
        for (j = 0; j < 8192; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][8192]);
  init_memory(&G2[0][0],&G2[0][8192]);
  BENCH("Example14",  example14(G2,G,ia), 64, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int output[128] ALIGNED16;
__attribute__((noinline))
void example2a (int y) {
   int i;
   
   
   for (i=0; i< 128-3 ; i+=4) {
      output[i] = y;
   }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[128]);
  BENCH("Example2a",  example2a(2), Mi/128*512, digest_memory(&output[0], &output[128]));
  return 0;
}


#include "header.h"
short input[64];
int   ia[64] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input, int* __restrict__ ia) {
  int i;
  for (i = 0; i < 64; i++) {
     ia[i] = (int) input[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  init_memory(&input[0], &input[64]);
  BENCH("Example10b", example10b(input,ia), Mi*4/64*512, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[16384] ALIGNED16;
__attribute__((noinline))
void example21(int *in, int n) {
  int i, sum = 0;
  for (i = n-1; i >= 0; i--)
    sum += in[i];
  in[0] = sum;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[16384]);
  BENCH("Example21",  example21(ia, 16384), Mi/16384*512, digest_memory(&ia[0], &ia[16384]));
  return 0;
}


#include "header.h"
int   ia[4];

====================
//generate_C_code) {
  int i;
  for (i = 0; i < 256; i++) {
    ia[i] = (int) input[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[256]);
  init_memory(&input[0], &input[256]);
  BENCH("Example10b", example10b(input,ia), Mi*4/256*512, digest_memory(&ia[0], &ia[256]));
  return 0;
}


#include "header.h"
int assign[8192][64];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<8192-1; i+=2) {
     for (j=0; j<64-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][64]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&assign[0][0], &assign[0][64]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[128][256];
int G2[128+4][256];
__attribute__((noinline))
void example14(int in[][256], int coeff[][256], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 128; i++)
        for (j = 0; j < 256; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][256]);
  init_memory(&G2[0][0],&G2[0][256]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[1024][1024];
int G2[1024+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
     int result = 0;
     for (i = 0; i < 1024; i++)
         for (j = 0; j < 1024; j++)
           result += in[i+k][j] * coeff[i][j];
    out[k] = result;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 16384, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int G[64][1024];
__attribute__((noinline))

====================
//generate_C_code(input1,input2,input3,result1,result2,result3), Mi/4*512, digest_c_code)));
  return 0;
}


#include "header.h"
int   ia[512] ALIGNED16;
__attribute__((noinline))
void example21(int *in, int n) {
  int i, sum = 0;
  for (i = n-1; i >= 0; i--)
    sum += in[i];
  in[0] = sum;
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[512]);
  BENCH("Example21",  example21(ia, 512), Mi/512*512, digest_memory(&ia[0], &ia[512]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[4096][128];
int G2[4096+4][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 4096; i++)
        for (j = 0; j < 128; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][128]);
  BENCH("Example14",  example14(G2,G,ia), 65536, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int assign[16384][128];
__attribute__((noinline))
void example8 (int y) {
   int i,j;
   
   for (i=0; i<16384-1; i+=2) {
     for (j=0; j<128-1; j+=2) {
       assign[i][j] = y;
       assign[i+1][j] = y;
       assign[i][j+1] = y;
       assign[i+1][j+1] = y;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&assign[0][0], &assign[0][128]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&assign[0][0], &assign[0][128]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[1024][128];
int G2[1024+8][128];
__attribute__((noinline))
void example14(int in[][128], int coeff[][128], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int dot_product = 0;
    for (i = 0; i < 1024; i++)
        for (j = 0; j < 128; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][128]);
  init_memory(&G2[0][0],&G2[0][
====================
//generate_C_code<int16, int*>(), Mi*4/64*512, digest_memory(&result[0], &result[64]));
  return 0;
}


#include "header.h"
short sa[4096];
short sb[4096];
int   ia[4096] ALIGNED16;
int   ib[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ sa, short *__restrict__ sb, int* __restrict__ ia, int* __restrict__ ib) {
  int i;
  for (i = 0; i < 4096; i++) {
    ia[i] = (int) sa[i];
    ib[i] = (int) sb[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4096]);
  init_memory(&ib[0], &ib[4096]);
  init_memory(&sa[0], &sa[4096]);
  init_memory(&sb[0], &sb[4096]);
  BENCH("Example10b", example10b(sa,sb,ia,ib), Mi*4/4096*512, digest_memory(&ia[0], &ia[4096])+digest_memory(&ib[0], &ib[4096]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[512][8192];
int G2[512+4][8192];
__attribute__((noinline))
void example14(int A[][8192], int coeff[][8192], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int sum = 0;
    for (i = 0; i < 512; i++)
       for (j = 0; j < 8192; j++)
         sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][8192]);
  init_memory(&G2[0][0],&G2[0][8192]);
  BENCH("Example14",  example14(G2,G,ia), 256, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
int Output[128][64];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<128-1; i+=2) {
     for (j=0; j<64-1; j+=2) {
       Output[i][j] = x;
       Output[i+1][j] = x;
       Output[i][j+1] = x;
       Output[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][64]);
  BENCH("Example8",   example8(8), 16384, digest_memory(&Output[0][0], &Output[0][64]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[128][1024];
int G2[128+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 128; i++)

====================
//generate_C_code())
void example8 (int x) {
   int i,j;
   
   for (i=0; i<16384-x; i++){
     for (j=0; j<64-x; j+=8) {
       result[i][j] = x;
       result[i+1][j] = x;
       result[i][j+1] = x;
       result[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][64]);
  BENCH("Example8",   example8(8), 2048, digest_memory(&result[0][0], &result[0][64]));
  return 0;
}


#include "header.h"
int   ia[8];
int G[512][1024];
int G2[512+8][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 8; k++) {
    int dot_product = 0;
    for (i = 0; i < 512; i++)
        for (j = 0; j < 1024; j++)
         dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[8]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 2048, digest_memory(&ia[0], &ia[8]));
  return 0;
}


#include "header.h"
int Output[64][1024];
__attribute__((noinline))
void example8 (int z) {
   int i,j;
   
   for (i=0; i<64-1; i+=2) {
     for (j=0; j<1024-1; j+=2) {
       Output[i][j] = z;
       Output[i+1][j] = z;
       Output[i][j+1] = z;
       Output[i+1][j+1] = z;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&Output[0][0], &Output[0][1024]);
  BENCH("Example8",   example8(8), 4096, digest_memory(&Output[0][0], &Output[0][1024]));
  return 0;
}


#include "header.h"
int result[128][64];
__attribute__((noinline))
void example8 (int x) {
   int i,j;
   
   for (i=0; i<128-1; i+=2) {
      for (j=0; j<64-1; j+=2) {
        result[i][j] = x;
       result[i+1][j] = x;
      result[i][j+1] = x;
      result[i+1][j+1] = x;
     }
   }
}
int main(int argc,char* argv[]){
  init_memory(&result[0][0], &result[0][64]);
  BENCH("Example8",   example8(8), 65536, digest_memory(&result[0][0], &result[0][64]));
  return
====================
//generate_C_code(input,assign1,assign2), Mi*4/1024*512, digest_memory(&assign1[0], &assign1[1024])+digest_memory(&assign2[0], &assign2[1024]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[256][1024];
int G2[256+4][1024];
__attribute__((noinline))
void example14(int in[][1024], int coeff[][1024], int *out) {
  int k,j,i=0;
  for (k = 0; k < 4; k++) {
    int dot_product = 0;
    for (i = 0; i < 256; i++)
        for (j = 0; j < 1024; j++)
          dot_product += in[i+k][j] * coeff[i][j];
    out[k] = dot_product;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4]);
  init_memory(&G[0][0], &G[0][1024]);
  init_memory(&G2[0][0],&G2[0][1024]);
  BENCH("Example14",  example14(G2,G,ia), 256, digest_memory(&ia[0], &ia[4]));
  return 0;
}


#include "header.h"
short input1[4096];
short input2[4096];
int   result1[4096] ALIGNED16;
int   result2[4096] ALIGNED16;
__attribute__((noinline))
void example10b(short *__restrict__ input1, short *__restrict__ input2, int* __restrict__ result1, int* __restrict__ result2) {
  int i;
  for (i = 0; i < 4096; i+=2) {
    result1[i] = (int) input1[i];
    result2[i] = (int) input2[i];
  }
}
int main(int argc,char* argv[]){
  init_memory(&result1[0], &result1[4096]);
  init_memory(&result2[0], &result2[4096]);
  init_memory(&input1[0], &input1[4096]);
  init_memory(&input2[0], &input2[4096]);
  BENCH("Example10b", example10b(input1,input2,result1,result2), Mi*4/4096*512, digest_memory(&result1[0], &result1[4096])+digest_memory(&result2[0], &result2[4096]));
  return 0;
}


#include "header.h"
int   ia[64] ALIGNED16;
int op1[256][64];
int op2[256][64];
__attribute__((noinline))
void example13(int op1[][64], int op2[][64], int *out) {
  int i,j;
  for (i = 0; i < 256; i++) {
    int sum_sub = 0;
    for (j = 0; j < 64; j+=8) {
      sum_sub += (op1[i][j] -op2[i][j]);
    }
    out[i] = sum_sub;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  init_memory(&op1[0][0], &op1[0][64]);
  init_memory(&op2[0][0],&op2[0][64]);
  BENCH("Example13",  example13(op1,op2,ia), 16384, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[4];
int G[256][512];
int G2
====================
//generate_C_code) {
  int i;
  for (i=0; i<4096-1; i+=2){
     output[i] = input[i+1] +input[i+3];
     output[i+1]=input[i] +input[i+2];
   }
}
int main(int argc,char* argv[]){
  init_memory(&output[0], &output[4096]);
  init_memory(&input[0], &input[4096]);
  BENCH("Example10b", example10b(input,output), Mi*4/4096*512, digest_memory(&output[0], &output[4096]));
  return 0;
}


#include "header.h"
int   ia[4096] ALIGNED16;
int in1[64][4096];
int in2[64][4096];
__attribute__((noinline))
void example13(int in1[][4096], int in2[][4096], int *out) {
  int i,j;
  for (i = 0; i < 64; i++) {
    int output = 0;
    for (j = 0; j < 4096; j+=8) {
      output += (in1[i][j] +in2[i][j]);
    }
    out[i] = output;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[4096]);
  init_memory(&in1[0][0], &in1[0][4096]);
  init_memory(&in2[0][0],&in2[0][4096]);
  BENCH("Example13",  example13(in1,in2,ia), 1024, digest_memory(&ia[0], &ia[4096]));
  return 0;
}


#include "header.h"
int   ia[64] ALIGNED16;
int op1[4096][64];
int op2[4096][64];
__attribute__((noinline))
void example13(int op1[][64], int op2[][64], int *out) {
  int i,j;
  for (i = 0; i < 4096; i++) {
    int sum_mul = 0;
    for (j = 0; j < 64; j+=8) {
      sum_mul += (op1[i][j] *op2[i][j]);
    }
    out[i] = sum_mul;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[64]);
  init_memory(&op1[0][0], &op1[0][64]);
  init_memory(&op2[0][0],&op2[0][64]);
  BENCH("Example13",  example13(op1,op2,ia), 2048, digest_memory(&ia[0], &ia[64]));
  return 0;
}


#include "header.h"
int   ia[2];
int G[64][64];
int G2[64+2][64];
__attribute__((noinline))
void example14(int A[][64], int coeff[][64], int *out) {
  int k,j,i=0;
  for (k = 0; k < 2; k++) {
    int sum = 0;
    for (i = 0; i < 64; i++)
        for (j = 0; j < 64; j++)
         sum += A[i+k][j] * coeff[i][j];
    out[k] = sum;
  }
}
int main(int argc,char* argv[]){
  init_memory(&ia[0], &ia[2]);
  init_memory(&G[0][0], &G[0][64]);
  init_memory(&G2[0][0],&G2[0][64]);
  BENCH("Example
====================
